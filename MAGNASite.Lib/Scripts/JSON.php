/* Copyright © Alex Malmyguine, 2022
 * All right reserved
 * This program remains the property of the copyright owner at all times.
 * It cannot be used for any purposes without express, written permission from the copyright owner.
 * Intellectual property contained in this program is protected by Canadian, US, and international copyright laws.
 * 
 * Generated by: Scripts/HtmlTranslation.php
 */
<pre>
<?php
echo "internal enum JsonErrors\n";
echo "{\n";
echo "JSON_ERROR_NONE					=" . JSON_ERROR_NONE					."; //    No error has occurred.																																																																	\n";
echo "JSON_ERROR_DEPTH					=" . JSON_ERROR_DEPTH					."; //    The maximum stack depth has been exceeded.																																																												\n";
echo "JSON_ERROR_STATE_MISMATCH		=" . JSON_ERROR_STATE_MISMATCH			."; //    Occurs with underflow or with the modes mismatch.																																																											\n";
echo "JSON_ERROR_CTRL_CHAR				=" . JSON_ERROR_CTRL_CHAR				."; //    Control character error, possibly incorrectly encoded.																																																									\n";
echo "JSON_ERROR_SYNTAX				=" . JSON_ERROR_SYNTAX					."; //    Syntax error.																																																																				\n";
echo "JSON_ERROR_UTF8					=" . JSON_ERROR_UTF8					."; //    Malformed UTF-8 characters, possibly incorrectly encoded.																																																									\n";
echo "JSON_ERROR_RECURSION				=" . JSON_ERROR_RECURSION				."; //    The object or array passed to json_encode() include recursive references and cannot be encoded. If the JSON_PARTIAL_OUTPUT_ON_ERROR option was given, null will be encoded in the place of the recursive reference.																		\n";
echo "JSON_ERROR_INF_OR_NAN			=" . JSON_ERROR_INF_OR_NAN				."; //    The value passed to json_encode() includes either NAN or INF. If the JSON_PARTIAL_OUTPUT_ON_ERROR option was given, 0 will be encoded in the place of these special numbers.																												\n";
echo "JSON_ERROR_UNSUPPORTED_TYPE		=" . JSON_ERROR_UNSUPPORTED_TYPE		."; //    A value of an unsupported type was given to json_encode(), such as a resource. If the JSON_PARTIAL_OUTPUT_ON_ERROR option was given, null will be encoded in the place of the unsupported value.																							\n";
echo "JSON_ERROR_INVALID_PROPERTY_NAME	=" . JSON_ERROR_INVALID_PROPERTY_NAME	."; //    A key starting with \u0000 character was in the string passed to json_decode() when decoding a JSON object into a PHP object.																																								\n";
echo "JSON_ERROR_UTF16					=" . JSON_ERROR_UTF16					."; //    Single unpaired UTF-16 surrogate in unicode escape contained in the JSON string passed to json_decode().				// The following constants can be combined to form options for json_decode().																						\n";
echo "}\n";
echo "public const int JSON_BIGINT_AS_STRING			=" . JSON_BIGINT_AS_STRING				."; //    Decodes large integers as their original string value.																																																									\n";
echo "public const int JSON_OBJECT_AS_ARRAY				=" . JSON_OBJECT_AS_ARRAY				."; //    Decodes JSON objects as PHP array. This option can be added automatically by calling json_decode() with the second parameter equal to true.							//The following constants can be combined to form options for json_encode().										\n";		
echo "public const int JSON_HEX_TAG						=" . JSON_HEX_TAG						."; //    All < and > are converted to \u003C and \u003E.																																																											\n";
echo "public const int JSON_HEX_AMP						=" . JSON_HEX_AMP						."; //    All & are converted to \u0026.																																																															\n";
echo "public const int JSON_HEX_APOS					=" . JSON_HEX_APOS						."; //    All ' are converted to \u0027.																																																															\n";
echo "public const int JSON_HEX_QUOT					=" . JSON_HEX_QUOT						."; //    All \" are converted to \u0022.																																																															\n";
echo "public const int JSON_FORCE_OBJECT				=" . JSON_FORCE_OBJECT					."; //    Outputs an object rather than an array when a non-associative array is used. Especially useful when the recipient of the output is expecting an object and the array is empty.																											\n";
echo "public const int JSON_NUMERIC_CHECK				=" . JSON_NUMERIC_CHECK					."; //    Encodes numeric strings as numbers.																																																														\n";
echo "public const int JSON_PRETTY_PRINT				=" . JSON_PRETTY_PRINT					."; //    Use whitespace in returned data to format it.																																																												\n";
echo "public const int JSON_UNESCAPED_SLASHES			=" . JSON_UNESCAPED_SLASHES				."; //    Don't escape /.																																																																			\n";
echo "public const int JSON_UNESCAPED_UNICODE			=" . JSON_UNESCAPED_UNICODE				."; //    Encode multibyte Unicode characters literally (default is to escape as \uXXXX).																																																			\n";
echo "public const int JSON_PARTIAL_OUTPUT_ON_ERROR		=" . JSON_PARTIAL_OUTPUT_ON_ERROR		."; //    Substitute some unencodable values instead of failing.																																																									\n";
echo "public const int JSON_PRESERVE_ZERO_FRACTION		=" . JSON_PRESERVE_ZERO_FRACTION		."; //    Ensures that float values are always encoded as a float value.																																																							\n";
echo "public const int JSON_UNESCAPED_LINE_TERMINATORS	=" . JSON_UNESCAPED_LINE_TERMINATORS	."; //    The line terminators are kept unescaped when JSON_UNESCAPED_UNICODE is supplied. It uses the same behaviour as it was before PHP 7.1 without this constant. Available as of PHP 7.1.0. // The following constants can be combined to form options for json_decode() and json_encode().	\n";											
echo "public const int JSON_INVALID_UTF8_IGNORE			=" . JSON_INVALID_UTF8_IGNORE			."; //    Ignore invalid UTF-8 characters. Available as of PHP 7.2.0.																																																								\n";
echo "public const int JSON_INVALID_UTF8_SUBSTITUTE		=" . JSON_INVALID_UTF8_SUBSTITUTE		."; //    Convert invalid UTF-8 characters to \0xfffd (Unicode Character 'REPLACEMENT CHARACTER') Available as of PHP 7.2.0.																																										\n";
echo "public const int JSON_THROW_ON_ERROR				=" . JSON_THROW_ON_ERROR				."; //    Throws JsonException if an error occurs instead of setting the global error state that is retrieved with json_last_error() and json_last_error_msg(). JSON_PARTIAL_OUTPUT_ON_ERROR takes precedence over JSON_THROW_ON_ERROR. Available as of PHP 7.3.0.									\n";
?>
</pre>
