<pre>
/* Copyright © Alex Malmyguine, 2022
 * All right reserved
 * This program remains the property of the copyright owner at all times.
 * It cannot be used for any purposes without express, written permission from the copyright owner.
 * Intellectual property contained in this program is protected by Canadian, US, and international copyright laws.
 * 
 * Generated by: Scripts/HtmlTranslation.php
 */

<?php

echo "internal enum OpenSslPurposeCheckingFlags\n";
echo "{\n";
echo "X509_PURPOSE_SSL_CLIENT      = " . X509_PURPOSE_SSL_CLIENT    .", // \n";
echo "X509_PURPOSE_SSL_SERVER      = " . X509_PURPOSE_SSL_SERVER    .", // \n";
echo "X509_PURPOSE_NS_SSL_SERVER   = " . X509_PURPOSE_NS_SSL_SERVER .", // \n";
echo "X509_PURPOSE_SMIME_SIGN      = " . X509_PURPOSE_SMIME_SIGN    .", // \n";
echo "X509_PURPOSE_SMIME_ENCRYPT   = " . X509_PURPOSE_SMIME_ENCRYPT .", // \n";
echo "X509_PURPOSE_CRL_SIGN        = " . X509_PURPOSE_CRL_SIGN      .", // \n";
echo "X509_PURPOSE_ANY             = " . X509_PURPOSE_ANY           ."  // \n";
echo "}\n\n";
echo "internal enum OpenSslPaddingFlags\n";
echo "{\n";
echo "OPENSSL_PKCS1_PADDING       = " . OPENSSL_PKCS1_PADDING      .", // \n";
echo "OPENSSL_SSLV23_PADDING      = " . OPENSSL_SSLV23_PADDING     .", // \n";
echo "OPENSSL_NO_PADDING          = " . OPENSSL_NO_PADDING         .", // \n";
echo "OPENSSL_PKCS1_OAEP_PADDING  = " . OPENSSL_PKCS1_OAEP_PADDING .", // \n"; 
echo "}\n\n";
echo "internal enum OpenSslKeyTypes\n";
echo "{\n";
echo "OPENSSL_KEYTYPE_RSA	= " . OPENSSL_KEYTYPE_RSA	.", //                                                                              \n";
echo "OPENSSL_KEYTYPE_DSA	= " . OPENSSL_KEYTYPE_DSA	.", //                                                                              \n";
echo "OPENSSL_KEYTYPE_DH	= " . OPENSSL_KEYTYPE_DH	.", //                                                                               \n";
echo "OPENSSL_KEYTYPE_EC	= " . OPENSSL_KEYTYPE_EC	.", //     This constant is only available when PHP is compiled with OpenSSL 0.9.8+. \n";
echo "}\n\n";
echo "internal enum OpenSslPKCS7Flags\n";
echo "{\n";
echo "PKCS7_TEXT 	 = " . PKCS7_TEXT 		.", // Adds text/plain content type headers to encrypted/signed message. If decrypting or verifying, it strips those headers from the output - if the decrypted or verified message is not of MIME type text/plain then an error will occur.                                                                                                                                        \n";
echo "PKCS7_BINARY 	 = " . PKCS7_BINARY		.", // Normally the input message is converted to \"canonical\" format which is effectively using CR and LF as end of line: as required by the S/MIME specification. When this option is present, no translation occurs. This is useful when handling binary data which may not be in MIME format.                                                                                        \n";
echo "PKCS7_NOINTERN = " . PKCS7_NOINTERN	.", // When verifying a message, certificates (if any) included in the message are normally searched for the signing certificate. With this option only the certificates specified in the extracerts parameter of openssl_pkcs7_verify() are used. The supplied certificates can still be used as untrusted CAs however.                                                            \n";
echo "PKCS7_NOVERIFY = " . PKCS7_NOVERIFY	.", // Do not verify the signers certificate of a signed message.                                                                                                                                                                                                                                                                                                                   \n";
echo "PKCS7_NOCHAIN  = " . PKCS7_NOCHAIN	.", // Do not chain verification of signers certificates: that is don't use the certificates in the signed message as untrusted CAs.                                                                                                                                                                                                                                                \n";
echo "PKCS7_NOCERTS  = " . PKCS7_NOCERTS	.", // When signing a message the signer's certificate is normally included - with this option it is excluded. This will reduce the size of the signed message but the verifier must have a copy of the signers certificate available locally (passed using the extracerts to openssl_pkcs7_verify() for example).                                                                  \n";
echo "PKCS7_NOATTR 	 = " . PKCS7_NOATTR		.", // Normally when a message is signed, a set of attributes are included which include the signing time and the supported symmetric algorithms. With this option they are not included.                                                                                                                                                                                               \n";
echo "PKCS7_DETACHED = " . PKCS7_DETACHED	.", // When signing a message, use cleartext signing with the MIME type \"multipart/signed\". This is the default if you do not specify any flags to openssl_pkcs7_sign(). If you turn this option off, the message will be signed using opaque signing, which is more resistant to translation by mail relays but cannot be read by mail agents that do not support S/MIME.          \n";
echo "PKCS7_NOSIGS 	 = " . PKCS7_NOSIGS		.", // Don't try and verify the signatures on a message                                                                                                                                                                                                                                                                                                                                 \n";
echo "}\n\n";
echo "internal enum OpenSslCMSFlags\n";
echo "{\n";
echo "OPENSSL_CMS_TEXT 	    = " . OPENSSL_CMS_TEXT 	     .", // Adds text/plain content type headers to encrypted/signed message. If decrypting or verifying, it strips those headers from the output - if the decrypted or verified message is not of MIME type text/plain then an error will occur.                                                                                                                               \n";
echo "OPENSSL_CMS_BINARY 	= " . OPENSSL_CMS_BINARY 	 .", // Normally the input message is converted to \"canonical\" format which is effectively using CR and LF as end of line: as required by the CMS specification. When this option is present, no translation occurs. This is useful when handling binary data which may not be in CMS format.                                                                             \n";
echo "OPENSSL_CMS_NOINTERN 	= " . OPENSSL_CMS_NOINTERN 	 .", // When verifying a message, certificates (if any) included in the message are normally searched for the signing certificate. With this option only the certificates specified in the untrusted_certificates_filename parameter of openssl_cms_verify() are used. The supplied certificates can still be used as untrusted CAs however.                                \n";
echo "OPENSSL_CMS_NOVERIFY 	= " . OPENSSL_CMS_NOVERIFY 	 .", // Do not verify the signers certificate of a signed message.                                                                                                                                                                                                                                                                                                          \n";
echo "OPENSSL_CMS_NOCERTS 	= " . OPENSSL_CMS_NOCERTS 	 .", // When signing a message the signer's certificate is normally included - with this option it is excluded. This will reduce the size of the signed message but the verifier must have a copy of the signers certificate available locally (passed using the untrusted_certificates_filename to openssl_cms_verify() for example).                                      \n";
echo "OPENSSL_CMS_NOATTR 	= " . OPENSSL_CMS_NOATTR 	 .", // Normally when a message is signed, a set of attributes are included which include the signing time and the supported symmetric algorithms. With this option they are not included.                                                                                                                                                                                  \n";
echo "OPENSSL_CMS_DETACHED 	= " . OPENSSL_CMS_DETACHED 	 .", // When signing a message, use cleartext signing with the MIME type \"multipart/signed\". This is the default if you do not specify any flags to openssl_cms_sign(). If you turn this option off, the message will be signed using opaque signing, which is more resistant to translation by mail relays but cannot be read by mail agents that do not support S/MIME. \n";
echo "OPENSSL_CMS_NOSIGS 	= " . OPENSSL_CMS_NOSIGS 	 .", // Don't try and verify the signatures on a message\n";
echo "}\n\n";
echo "internal enum OpenSslSignatureAlgorithms\n";
echo "{\n";
echo "OPENSSL_ALGO_DSS1   = " . OPENSSL_ALGO_DSS1   .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_SHA1   = " . OPENSSL_ALGO_SHA1   .", //     Used as default algorithm by openssl_sign() and openssl_verify().                                                                                                                               \n";
echo "OPENSSL_ALGO_SHA224 = " . OPENSSL_ALGO_SHA224 .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_SHA256 = " . OPENSSL_ALGO_SHA256 .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_SHA384 = " . OPENSSL_ALGO_SHA384 .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_SHA512 = " . OPENSSL_ALGO_SHA512 .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_RMD160 = " . OPENSSL_ALGO_RMD160 .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_MD5    = " . OPENSSL_ALGO_MD5    .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_MD4    = " . OPENSSL_ALGO_MD4    .", //                                                                                                                                                                                                     \n";
echo "OPENSSL_ALGO_MD2    = " . OPENSSL_ALGO_MD2    .", //     This constant is only available if PHP is compiled with MD2 support. This requires passing in the -DHAVE_OPENSSL_MD2_H CFLAG when compiling PHP, and enable-md2 when compiling OpenSSL 1.0.0+.  \n";
echo "}\n\n";
echo "internal enum OpenSslCiphers\n";
echo "{\n";
echo "OPENSSL_CIPHER_RC2_40       = " . OPENSSL_CIPHER_RC2_40      .", // \n";
echo "OPENSSL_CIPHER_RC2_128      = " . OPENSSL_CIPHER_RC2_128     .", // \n";
echo "OPENSSL_CIPHER_RC2_64       = " . OPENSSL_CIPHER_RC2_64      .", // \n";
echo "OPENSSL_CIPHER_DES          = " . OPENSSL_CIPHER_DES         .", // \n";
echo "OPENSSL_CIPHER_3DES         = " . OPENSSL_CIPHER_3DES        .", // \n";
echo "OPENSSL_CIPHER_AES_128_CBC  = " . OPENSSL_CIPHER_AES_128_CBC .", // \n";
echo "OPENSSL_CIPHER_AES_192_CBC  = " . OPENSSL_CIPHER_AES_192_CBC .", // \n";
echo "OPENSSL_CIPHER_AES_256_CBC  = " . OPENSSL_CIPHER_AES_256_CBC .", // \n"; 
echo "}\n\n";
echo "internal enum OpenSslServerNameIndication\n";
echo "{\n";
echo "OPENSSL_TLSEXT_SERVER_NAME  = " . OPENSSL_TLSEXT_SERVER_NAME  .", //  Whether SNI support is available or not. \n";
echo "}\n\n";
echo "internal enum OpenSslOther\n";
echo "{\n";
echo "OPENSSL_RAW_DATA        = " . OPENSSL_RAW_DATA       .", // If OPENSSL_RAW_DATA is set in the openssl_encrypt() or openssl_decrypt(), the returned data is returned as-is. When it is not specified, Base64 encoded data is returned to the caller.                                                                                                                                                                                                     \n";
echo "OPENSSL_ZERO_PADDING    = " . OPENSSL_ZERO_PADDING   .", // By default encryption operations are padded using standard block padding and the padding is checked and removed when decrypting. If OPENSSL_ZERO_PADDING is set in the openssl_encrypt() or openssl_decrypt() options then no padding is performed, the total amount of data encrypted or decrypted must then be a multiple of the block size or an error will occur.                       \n";
echo "OPENSSL_ENCODING_SMIME  = " . OPENSSL_ENCODING_SMIME .", // Indicates that encoding is S/MIME.                                                                                                                                                                                                                                                                                                                                                      \n";
echo "OPENSSL_ENCODING_DER    = " . OPENSSL_ENCODING_DER   .", // Indicates that encoding is DER (Distinguished Encoding Rules).                                                                                                                                                                                                                                                                                                                          \n";
echo "OPENSSL_ENCODING_PEM    = " . OPENSSL_ENCODING_PEM   .", // Indicates that encoding is PEM (Privacy-Enhanced Mail).                                                                                                                                                                                                                                                                                                                                 \n";
echo "}\n\n";
echo "public const string OPENSSL_VERSION_TEXT    = " . OPENSSL_VERSION_TEXT   ."; //  \n";
echo "public const int OPENSSL_VERSION_NUMBER  = " . OPENSSL_VERSION_NUMBER ."; //  \n";

?>
</pre>
